{"version":3,"sources":["../src/index.ts","../src/connected_papers_client.ts","../src/consts.ts"],"sourcesContent":["import {ConnectedPapersClient} from './connected_papers_client';\n\nexport {ConnectedPapersClient};\n","import axios from 'axios';\n\nimport {accessToken, connectedPapersRestApi} from './consts';\nimport {type Graph, type PaperId} from './graph';\n\nexport enum GraphResponseStatuses {\n\tBAD_ID = 'BAD_ID',\n\tERROR = 'ERROR',\n\tNOT_IN_DB = 'NOT_IN_DB',\n\tOLD_GRAPH = 'OLD_GRAPH',\n\tFRESH_GRAPH = 'FRESH_GRAPH',\n\tIN_PROGRESS = 'IN_PROGRESS',\n\tQUEUED = 'QUEUED',\n\tBAD_TOKEN = 'BAD_TOKEN',\n\tBAD_REQUEST = 'BAD_REQUEST',\n\tOUT_OF_REQUESTS = 'OUT_OF_REQUESTS',\n}\n\nexport type GraphResponse = {\n\tstatus: GraphResponseStatuses;\n\tgraph_json?: Graph;\n\tprogress?: number;\n};\n\nconst sleepTimeBetweenChecks = 1000;\nconst sleepTimeAfterError = 5000;\n\nconst endResponseStatuses = [\n\tGraphResponseStatuses.BAD_ID,\n\tGraphResponseStatuses.ERROR,\n\tGraphResponseStatuses.NOT_IN_DB,\n\tGraphResponseStatuses.FRESH_GRAPH,\n\tGraphResponseStatuses.BAD_TOKEN,\n\tGraphResponseStatuses.BAD_REQUEST,\n\tGraphResponseStatuses.OUT_OF_REQUESTS,\n];\n\nexport class ConnectedPapersClient {\n\tprivate readonly accessToken: string;\n\tprivate readonly serverAddr: string;\n\n\tconstructor(args: {access_token?: string; server_addr?: string} = {}) {\n\t\tthis.accessToken = args.access_token ?? accessToken;\n\t\tthis.serverAddr = args.server_addr ?? connectedPapersRestApi;\n\t}\n\n\tpublic async * getGraphAsyncIterator(args: {paper_id: PaperId; fresh_only?: boolean; loop_until_fresh?: boolean}): AsyncGenerator<GraphResponse> {\n\t\tlet retryCounter = 3;\n\t\twhile (retryCounter > 0) {\n\t\t\ttry {\n\t\t\t\tlet newestGraph: Graph | undefined;\n\t\t\t\twhile (true) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst resp = await axios.get(\n\t\t\t\t\t\t`${this.serverAddr}/papers-api/graph/${Number(args.fresh_only ?? false)}/${args.paper_id}`,\n\t\t\t\t\t\t{headers: {'X-Api-Key': this.accessToken}},\n\t\t\t\t\t);\n\t\t\t\t\tif (resp.status !== 200) {\n\t\t\t\t\t\tthrow new Error(`Bad response: ${resp.status}`);\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tconst {data} = resp;\n\t\t\t\t\tif (!data) {\n\t\t\t\t\t\tthrow new Error(`Bad response: ${resp.status}`);\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\tif (!Object.values(GraphResponseStatuses).includes(data.status)) {\n\t\t\t\t\t\tdata.status = GraphResponseStatuses.ERROR;\n\t\t\t\t\t}\n\n\t\t\t\t\targs.fresh_only = true;\n\t\t\t\t\tconst response: GraphResponse = data as GraphResponse;\n\t\t\t\t\tif (response.graph_json) {\n\t\t\t\t\t\tnewestGraph = response.graph_json;\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-constant-binary-expression\n\t\t\t\t\tif (endResponseStatuses.includes(response.status) || ((!args.loop_until_fresh) ?? true)) {\n\t\t\t\t\t\tyield response;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse.graph_json = newestGraph;\n\t\t\t\t\tyield response;\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop, no-promise-executor-return\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, sleepTimeBetweenChecks));\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tretryCounter -= 1;\n\t\t\t\tif (retryCounter === 0) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// eslint-disable-next-line no-await-in-loop, no-promise-executor-return\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, sleepTimeAfterError));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async getGraph(args: {paper_id: PaperId; fresh_only?: boolean}): Promise<GraphResponse> {\n\t\tconst generator = this.getGraphAsyncIterator(args);\n\t\tlet result: GraphResponse = {\n\t\t\tstatus: GraphResponseStatuses.ERROR,\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t\tgraph_json: undefined,\n\t\t\tprogress: undefined,\n\t\t};\n\t\tfor await (const response of generator) {\n\t\t\tresult = response;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic async getRemainingUsages(): Promise<number> {\n\t\ttry {\n\t\t\tconst response = await axios.get(`${this.serverAddr}/papers-api/remaining-usages`, {\n\t\t\t\theaders: {'X-Api-Key': this.accessToken},\n\t\t\t});\n\n\t\t\tif (response.status !== 200) {\n\t\t\t\tthrow new Error(`Bad response: ${response.status}`);\n\t\t\t}\n\n\t\t\tswitch (typeof response.data.remaining_uses) {\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn response.data.remaining_uses as number;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Bad response: ${JSON.stringify(response)}`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Handle error as needed\n\t\t\tconsole.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getFreeAccessPapers(): Promise<PaperId[]> {\n\t\ttry {\n\t\t\tconst response = await axios.get(`${this.serverAddr}/papers-api/free-access-papers`, {\n\t\t\t\theaders: {'X-Api-Key': this.accessToken},\n\t\t\t});\n\n\t\t\tif (response.status !== 200) {\n\t\t\t\tthrow new Error(`Bad response: ${response.status}`);\n\t\t\t}\n\n\t\t\treturn response.data.papers as PaperId[];\n\t\t} catch (error) {\n\t\t\t// Handle error as needed\n\t\t\tconsole.error(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n","const testToken = 'TEST_TOKEN';\nconst defaultServerAddress = 'https://api.connectedpapers.com';\n\nexport const accessToken = process.env.CONNECTED_PAPERS_API_KEY ?? testToken;\nexport const connectedPapersRestApi = process.env.CONNECTED_PAPERS_REST_API ?? defaultServerAddress;\n"],"mappings":"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","names":["_a","GraphResponseStatuses","_a","axios"]}